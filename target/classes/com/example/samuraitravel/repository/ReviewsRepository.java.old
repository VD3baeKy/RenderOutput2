package com.example.samuraitravel.repository;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.transaction.annotation.Transactional;

import com.example.samuraitravel.entity.Review;

public interface ReviewsRepository extends JpaRepository<Review, Integer> {
    //public Page<Review> findByUserOrderByCreatedAtDesc(User user, Pageable pageable);
    //public Page<Review> findByHouseOrderByCreatedAtDesc(House house, Pageable pageable);
    //public Page<Review> findAllByOrderByCreatedAtDesc(Pageable pageable);
    //public Page<Review> findByUserAndHouseOrderByCreatedAtDesc(User user, House house, Pageable pageable);
	
   
    @Modifying
    @Transactional
    @Query("DELETE FROM Review r WHERE r.id = :reviewId")
    void deleteById(Integer id);
    
    //宿名と宿の住所から検索して、価格の安い順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.name LIKE \"%?1%\" OR h.address LIKE \"%?1%\" ORDER BY h.price ASC")
    @Query("SELECT r FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.name LIKE \"%?1%\" OR h.address LIKE \"%?1%\" ORDER BY h.price ASC")
    public Page<Review> findByHousesNameLikeOrHousesAddressLikeOrderByHousesPriceAsc(String keyword, Pageable pageable);
    
    //宿名と宿の住所から検索して、レビューの新しい順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.name LIKE \"%?1%\" OR h.address LIKE \"%?1%\" ORDER BY r.updated_at DESC")
    @Query("SELECT r FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.name LIKE \"%?1%\" OR h.address LIKE \"%?1%\" ORDER BY r.updated_at DESC")
    public Page<Review> findByHousesNameLikeOrHousesAddressLikeOrderByReviewCreatedAtDesc(String keyword, Pageable pageable);
    
    //宿の住所から検索して、価格の安い順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.address LIKE \"%?1%\" ORDER BY h.price ASC")
    @Query("SELECT r FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.address LIKE \"%?1%\" ORDER BY h.price ASC")
    public Page<Review> findByHousesAddressLikeOrderByHousesPriceAsc(String keyword, Pageable pageable);
    
    ///宿の住所から検索して、レビューの新しい順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.address LIKE \"%?1%\" ORDER BY r.updated_at DESC")
    @Query("SELECT r FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.address LIKE \"%?1%\" ORDER BY r.updated_at DESC")
    public Page<Review> findByHousesAddressLikeOrderByReviewCreatedAtDesc(String keyword, Pageable pageable);
    
    //宿の電話番号から検索して、価格の安い順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.phone_number LIKE \"%?1%\" OR h.name LIKE \\\"%?2%\\\" OR h.address LIKE \\\"%?2%\\\" ORDER BY h.price ASC")
    @Query("SELECT r FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.phone_number LIKE \"%?1%\" OR h.name LIKE \\\"%?2%\\\" OR h.address LIKE \\\"%?2%\\\" ORDER BY h.price ASC")
    public Page<Review> findByPhoneNumberLikeOrderByHousesPriceAsc(String phoneStr, String keyword, Pageable pageable);
    
    //宿の電話番号から検索して、レビューの新しい順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.phone_number LIKE \"%?1%\" OR h.name LIKE \\\"%?2%\\\" OR h.address LIKE \\\"%?2%\\\" ORDER BY r.updated_at DESC")
    @Query("SELECT r FROM reviews r JOIN houses h ON r.house_id = h.id WHERE h.phone_number LIKE \"%?1%\" OR h.name LIKE \\\"%?2%\\\" OR h.address LIKE \\\"%?2%\\\" ORDER BY r.updated_at DESC")
    public Page<Review> findByPhoneNumberLikeOrderByReviewCreatedAtDesc(String phoneStr, String keyword, Pageable pageable);
    
    //宿の価格（〇円以下）で検索して、価格の安い順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON h.id=r.house_id WHERE h.price <= ?1 ORDER BY h.price ASC")
    @Query("SELECT r FROM reviews r JOIN houses h ON h.id=r.house_id WHERE h.price <= ?1 ORDER BY h.price ASC")
    public Page<Review> findByHousesPriceLessThanEqualOrderByHousesPriceAsc(Integer keyword1, Pageable pageable);
    
    //宿の価格（〇円以下）で検索して、レビューの新しい順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON h.id=r.house_id WHERE h.price <= ?1 ORDER BY r.updated_at DESC")
    @Query("SELECT r FROM reviews r JOIN houses h ON h.id=r.house_id WHERE h.price <= ?1 ORDER BY r.updated_at DESC")
    public Page<Review> findByHousesPriceLessThanEqualOrderByReviewCreatedAtDesc(Integer keyword1, Pageable pageable);
    
    //全てのレビューを、価格の安い順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON h.id=r.house_id WHERE 1 ORDER BY h.price ASC")
    @Query("SELECT r FROM reviews r JOIN houses h ON h.id=r.house_id WHERE 1 ORDER BY h.price ASC")
    public Page<Review> findAllByOrderByHousesPriceAsc(Pageable pageable);
    
    //全てのレビューを、レビューの新しい順でソート
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON h.id=r.house_id WHERE 1 ORDER BY r.updated_at DESC")
    @Query("SELECT r FROM reviews r JOIN houses h ON h.id=r.house_id WHERE 1 ORDER BY r.updated_at DESC")
    public Page<Review> findAllByOrderByReviewCreatedAtDesc(Pageable pageable);
    
    
    public List<Review> findTop10ByOrderByCreatedAtDesc();
    public List<Review> findByHouseIdOrderByCreatedAtDesc(Integer houseId);
    //public Optional<Review> findById(Integer id);
    
    /*
    public static Page<Review> findByNameLikeOrAddressLikeOrderByCreatedAtDesc(String nameKeyword, String addressKeyword, Pageable pageable) {
		// TODO 自動生成されたメソッド・スタブ
		return findByNameLikeOrAddressLikeOrderByCreatedAtDesc(nameKeyword, addressKeyword, pageable);
	}  
    public static Page<Review> findByNameLikeOrAddressLikeOrderByPriceAsc(String nameKeyword, String addressKeyword, Pageable pageable) {
		// TODO 自動生成されたメソッド・スタブ
		return findByNameLikeOrAddressLikeOrderByPriceAsc(nameKeyword, addressKeyword, pageable);
	}  
    public static Page<Review> findByAddressLikeOrderByCreatedAtDesc(String area, Pageable pageable) {
		// TODO 自動生成されたメソッド・スタブ
		return  findByAddressLikeOrderByCreatedAtDesc(area, pageable) ;
	}
    public static Page<Review> findByAddressLikeOrderByPriceAsc(String area, Pageable pageable) {
		// TODO 自動生成されたメソッド・スタブ
		return findByAddressLikeOrderByPriceAsc(area, pageable);
	}
    public static Page<Review> findByPriceLessThanEqualOrderByCreatedAtDesc(Integer price, Pageable pageable) {
		// TODO 自動生成されたメソッド・スタブ
		return findByPriceLessThanEqualOrderByCreatedAtDesc(price, pageable);
	}
    public static Page<Review> findByPriceLessThanEqualOrderByPriceAsc(Integer price, Pageable pageable) {
		// TODO 自動生成されたメソッド・スタブ
		return findByPriceLessThanEqualOrderByPriceAsc(price, pageable);
	} 
    public static Page<Review> findAllByOrderByCreatedAtDesc(Pageable pageable) {
		// TODO 自動生成されたメソッド・スタブ
    	System.out.println("   findAllByOrderByCreatedAtDesc(pageable)= " + findAllByOrderByCreatedAtDesc(pageable));
		return findAllByOrderByCreatedAtDesc(pageable);
	}
    public static Page<Review> findAllByOrderByPriceAsc(Pageable pageable) {
		// TODO 自動生成されたメソッド・スタブ
		return findAllByOrderByPriceAsc(pageable);
	}
    */

    /*
    public  List<Review> findByAddressLikeOrderByCreatedAtDesc(String area, Pageable pageable);
    //{
		// TODO 自動生成されたメソッド・スタブ
	//	return findByAddressLikeOrderByCreatedAtDesc(area, pageable) ;
	//}
    public  List<Review> findByAddressLikeOrderByPriceAsc(String area, Pageable pageable);
    //{
		// TODO 自動生成されたメソッド・スタブ
	//	return findByAddressLikeOrderByPriceAsc(area, pageable);
	//}
    public  List<Review> findByPriceLessThanEqualOrderByCreatedAtDesc(Integer price, Pageable pageable);
    //{
		// TODO 自動生成されたメソッド・スタブ
	//	return findByPriceLessThanEqualOrderByCreatedAtDesc(price, pageable);
	//}
    public  List<Review> findByPriceLessThanEqualOrderByPriceAsc(Integer price, Pageable pageable);
    //{
		// TODO 自動生成されたメソッド・スタブ
	//	return findByPriceLessThanEqualOrderByPriceAsc(price, pageable);
	//} 
    public  List<Review> findAllByOrderByCreatedAtDesc(Pageable pageable);
    //{
		// TODO 自動生成されたメソッド・スタブ
	//	return findAllByOrderByCreatedAtDesc(pageable);
	//}
    public  List<Review> findAllByOrderByPriceAsc(Pageable pageable);
    //{
		// TODO 自動生成されたメソッド・スタブ
	//	return findAllByOrderByPriceAsc(pageable);
	//}

    public  List<Review> findByNameLikeOrAddressLikeOrderByPriceAsc(String string, String string2, Pageable pageable);
    //{
		// TODO 自動生成されたメソッド・スタブ
	//	return findByNameLikeOrAddressLikeOrderByPriceAsc(string, string2, pageable);
	//}

    public List<Review> findByNameLikeOrAddressLikeOrderByCreatedAtDesc(String string, String string2, Pageable pageable);
	//{
		// TODO 自動生成されたメソッド・スタブ
	//	return findByNameLikeOrAddressLikeOrderByCreatedAtDesc(string, string2, pageable);
	//}
	*/
    
    
    
    //レーティング検索
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON h.id=r.house_id WHERE r.rating = ?1 ORDER BY r.updated_at ASC")
    @Query("SELECT r FROM reviews r JOIN houses h ON h.id=r.house_id WHERE r.rating = ?1 ORDER BY r.updated_at ASC")
    public Page<Review> findByRatingOrderByCreatedAtAsc(Integer rate, Pageable pageable);    
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON h.id=r.house_id WHERE r.rating = ?1 ORDER BY r.updated_at DESC")
    @Query("SELECT r FROM reviews r JOIN houses h ON h.id=r.house_id WHERE r.rating = ?1 ORDER BY r.updated_at DESC")
    public Page<Review> findByRatingOrderByCreatedAtDesc(Integer rate, Pageable pageable);
    
    //レビュー本文検索
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON h.id=r.house_id WHERE r.review_text LIKE \"%?1%\" ORDER BY r.updated_at ASC")
    @Query("SELECT r FROM reviews r JOIN houses h ON h.id=r.house_id WHERE r.review_text LIKE \"%?1%\" ORDER BY r.updated_at ASC")
    public Page<Review> findByreviewTextLikeOrderByCreatedAtAsc(String keyword1, Pageable pageable);
    //@Query("SELECT r.house_id, r.updated_at, r.rating, r.review_text, h.id AS HouseID, h.name AS HouseName, h.address AS HouseAddress, h.id AS houseID, h.price AS Price, h.phone_number AS PhoneNumber FROM reviews r JOIN houses h ON h.id=r.house_id WHERE r.review_text LIKE \"%?1%\" ORDER BY r.updated_at DESC")
    @Query("SELECT r FROM reviews r JOIN houses h ON h.id=r.house_id WHERE r.review_text LIKE \"%?1%\" ORDER BY r.updated_at DESC")
    public Page<Review> findByreviewTextLikeOrderByCreatedAtDesc(String keyword1, Pageable pageable);
    
    



}
