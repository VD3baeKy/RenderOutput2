package com.example.samuraitravel.controller;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.web.PageableDefault;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.samuraitravel.repository.HouseRepository;
import com.example.samuraitravel.repository.ReviewHouseDTO;
import com.example.samuraitravel.repository.ReviewsRepository;
import com.example.samuraitravel.repository.UserRepository;
import com.example.samuraitravel.service.ReviewsService;
import com.example.samuraitravel.service.UserService;

@Controller
@RequestMapping("/reviews")
public class ReviewsController {

    private static final Logger logger = LoggerFactory.getLogger(ReviewsController.class);

    private final HouseRepository houseRepository;
    private final UserRepository userRepository;
    private final ReviewsRepository reviewsRepository;
    
    @Autowired
    private ReviewsService reviewService;

    @Autowired
    private UserService userService;
    
    @Autowired
    public ReviewsController(
        HouseRepository houseRepository, 
        UserRepository userRepository,
        ReviewsRepository reviewsRepository
    ) {
        this.houseRepository = houseRepository;
        this.userRepository = userRepository;
        this.reviewsRepository = reviewsRepository;
    }
      
    @GetMapping
    public String index(
            @RequestParam(name = "keyword", required = false) String keyword,
            @RequestParam(name = "area", required = false) String area,
            @RequestParam(name = "price", required = false) Integer price,  
            @RequestParam(name = "order", required = false) String order,
            @PageableDefault(page = 0, size = 10, sort = "id", direction = Direction.ASC) Pageable pageable,
            Model model
    ){

        Page<ReviewHouseDTO> reviewPage;        
                
        if (keyword != null && !keyword.isEmpty()) {
            if ("priceAsc".equals(order)) {
                reviewPage = reviewsRepository.findByHousesNameLikeOrHousesAddressLikeOrderByHousesPriceAsc(keyword, pageable);
            } else {
                reviewPage = reviewsRepository.findByHousesNameLikeOrHousesAddressLikeOrderByReviewCreatedAtDesc(keyword, pageable);
            }            
        } else if (area != null && !area.isEmpty()) {            
            if ("priceAsc".equals(order)) {
                reviewPage = reviewsRepository.findByHousesAddressLikeOrderByHousesPriceAsc(area, pageable);
            } else {
                reviewPage = reviewsRepository.findByHousesAddressLikeOrderByReviewCreatedAtDesc(area, pageable);
            }            
        } else if (price != null) {
            if ("priceAsc".equals(order)) {
                reviewPage = reviewsRepository.findByHousesPriceLessThanEqualOrderByHousesPriceAsc(price, pageable);
            } else {
                reviewPage = reviewsRepository.findByHousesPriceLessThanEqualOrderByReviewCreatedAtDesc(price, pageable);
            }            
    	} else {            
            if ("priceAsc".equals(order)) {
                reviewPage = reviewsRepository.findAllByOrderByHousesPriceAsc(pageable);
            } else {
                reviewPage = reviewsRepository.findAllByOrderByReviewCreatedAtDesc(pageable);   
            }            
        }
        
        logger.debug("reviewPage= {}", reviewPage);
        logger.debug("keyword= {}", keyword);
        logger.debug("area= {}", area);
        logger.debug("price= {}", price);
        logger.debug("order= {}", order);
        logger.debug("pageable= {}", pageable);
        
        List<ReviewHouseDTO> reviewList = reviewPage.getContent();
        model.addAttribute("reviewList", reviewList);
        
        model.addAttribute("reviewPage", reviewPage);
        model.addAttribute("keyword", keyword);
        model.addAttribute("area", area);
        model.addAttribute("price", price); 
        model.addAttribute("order", order);
        
        
        return "reviews/index";
    }
    

}